
defaultTasks 'build'

ext {
}

buildscript {
    ext {
		uptodateVersion = "1.6.0"
        retrolambdaPluginVersion = "3.2.5"
        retrolambdaVersion = "2.3.0"
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "com.ofg:uptodate-gradle-plugin:$uptodateVersion"
        classpath "me.tatarka:gradle-retrolambda:$retrolambdaPluginVersion"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
    }
}

apply plugin: "jacoco"
apply plugin: 'com.github.kt3k.coveralls'

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

allprojects {



    jacoco {
//        toolVersion = "0.7.1.201405082137"
        toolVersion = "0.7.6.201602180812"

    }

	defaultTasks "build"

	ext {
        isSnapshot = true
        fjBaseVersion = "4.6"

        snapshotAppendix = "-SNAPSHOT"
		fjVersion = fjBaseVersion + (isSnapshot ? snapshotAppendix : "")
        fjConsumeVersion = "4.5"

        signModule = false
        useRetroLambda = false

        projectTitle = "Functional Java"
		projectName = "functionaljava"
        pomProjectName = projectTitle
        pomOrganisation = projectTitle
        projectDescription = "Functional Java is an open source library that supports closures for the Java programming language"
        projectUrl = "http://functionaljava.org/"
        scmUrl = "git://github.com/functionaljava/functionaljava.git"
        scmGitFile = "scm:git@github.com:functionaljava/functionaljava.git"

        sonatypeBaseUrl = "https://oss.sonatype.org"
        sonatypeSnapshotUrl = "$sonatypeBaseUrl/content/repositories/snapshots/"
        sonatypeRepositoryUrl = "$sonatypeBaseUrl/content/groups/public"
        sonatypeReleaseUrl = "$sonatypeBaseUrl/service/local/staging/deploy/maven2/"
        sonatypeUploadUrl = isSnapshot ? sonatypeSnapshotUrl : sonatypeReleaseUrl
        primaryEmail = "functionaljava@googlegroups.com"

        dependencyJunit = "junit:junit:4.12"

        displayCompilerWarnings = true

        newJdkEnvVar = "JAVA8_HOME"
        oldJdkEnvVar = "JAVA6_HOME"
        retroLambdaTarget = JavaVersion.VERSION_1_6
    }

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }

	version = fjVersion
	group = "org.functionaljava"

}

subprojects {


    buildscript {
        repositories {
            mavenCentral()
        }
    }

    apply plugin: "jacoco"

    apply from: "$rootDir/lib.gradle"
	apply plugin: "java"
	apply plugin: "eclipse"
    apply plugin: "com.ofg.uptodate"

	repositories {
        mavenLocal()
        jcenter()
		mavenCentral()
		maven {
			url sonatypeRepositoryUrl
		}
	}

	if (displayCompilerWarnings) {
		tasks.withType(JavaCompile) {
			options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
		}
	}

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
//        html.destination "${buildDir}/jacocoHtml"
        }
    }


    task coverage(dependsOn: ["test", "jacocoTestReport"]) << {

    }

}

task coverage(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

configure(subprojects.findAll { it.name != "props-core" }) {

    apply plugin: "maven"
    apply plugin: "signing"
    apply plugin: "osgi"

    sourceCompatibility = "1.8"

    task javadocJar(type: Jar, dependsOn: "javadoc") {
        classifier = 'javadoc'
        from "build/docs/javadoc"
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    jar {
        version project.fjVersion
        manifest {
            name = 'Functional Java'
            instruction 'Signature-Version', project.fjVersion
            instruction 'Bundle-ActivationPolicy', 'lazy'
            instruction 'Bundle-Vendor', 'functionaljava.org'
			if(project.name != "core") {
				instruction 'Require-Bundle', 'org.functionaljava;bundle-version="'+project.fjBaseVersion+'"'
			}
        }
    }

    eclipse {
      project {
        natures 'org.eclipse.pde.PluginNature'
        buildCommand 'org.eclipse.pde.ManifestBuilder'
        buildCommand 'org.eclipse.pde.SchemaBuilder'
      }
    }

    // Output MANIFEST.MF statically so eclipse can see it for plugin development
    task eclipsePluginManifest(dependsOn: jar) << {
      file("META-INF").mkdirs()
      jar.manifest.writeTo(file("META-INF/MANIFEST.MF"))
    }

    eclipseProject.dependsOn eclipsePluginManifest
}

task env << {
	println System.getenv()
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	dependsOn = subprojects.jacocoTestReport
	sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
	classDirectories = files(subprojects.sourceSets.main.output)
	executionData = files(subprojects.jacocoTestReport.executionData)
	reports {
		xml.enabled true
		xml.destination ="${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	}
	// We could remove the following setOnlyIf line, but then
	// jacocoRootReport would silently be SKIPPED if something with
	// the projectsWithUnitTests is wrong (e.g. a project is missing
	// in there).
	setOnlyIf { true }
}

coveralls {
	sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}
