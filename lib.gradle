
import org.apache.tools.ant.taskdefs.condition.Os

String findCommand(String dir, String command) {
    def extension = Os.isFamily(Os.FAMILY_WINDOWS) ? ".exe" : ""
    def cmd = "$dir/$command$extension"
    if (! new File(cmd).exists()) {
        throw new Exception("Command $command not found in dir $dir")
    }
    cmd
}

String findJavaCommand(String command) {
    def jh = System.getenv("JAVA8_HOME")
    if (jh == null) {
        throw new Exception("Environment variable JAVA8_HOME not set")
    }
    findCommand("$jh/bin", command)
}

Boolean doSigning(String signingAllowed, Boolean doModule) {
    def b = signingAllowed.trim() == "true" && doModule
//    println("signModule: ${project.name} signingEnabled: $signingAllowed module: $doModule")
    b
}

void performSigning(String signingAllowed, Boolean doModule) {
    signing {
        required { doSigning(signingAllowed, doModule) }
        sign configurations.archives
    }
}

void configureUpload(String signingEnabled, Boolean signModule) {

    uploadArchives {
        enabled = false
        repositories {
            mavenDeployer {
                if (doSigning(signingEnabled, signModule)) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }

                repository(url: sonatypeUploadUrl) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                pom {
                    groupId = project.group
                    project {
                        name pomProjectName
                        packaging 'jar'
                        description projectDescription
                        url projectUrl
                        organization {
                            name pomOrganisation
                            url projectUrl
                        }
                        scm {
                            url scmUrl
                        }
                        licenses {
                            license {
                                name "The BSD3 License"
                                url "https://github.com/functionaljava/functionaljava/blob/master/etc/LICENCE"
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                email primaryEmail
                            }
                        }
                    }
                }
            }
        }
    }
}

void configureAllRetroLambda() {
    configureRetroLambda(useRetroLambda, newJdkEnvVar, oldJdkEnvVar, retroLambdaTarget)
}

void configureRetroLambda(boolean useRetroLambda, String newJdkEnvVar, String oldJdkEnvVar, JavaVersion retroLambdaTarget) {

    if (useRetroLambda) {
        apply plugin: 'me.tatarka.retrolambda'
        retrolambda {
            jdk System.getenv(newJdkEnvVar)
            oldJdk System.getenv(oldJdkEnvVar)
            javaVersion retroLambdaTarget
        }
        dependencies {
            retrolambdaConfig "net.orfjackal.retrolambda:retrolambda:$retrolambdaVersion"
        }
    }
}

ext {
    findJavaCommand = this.&findJavaCommand
    doSigning = this.&doSigning
    performSigning = this.&performSigning
    configureUpload = this.&configureUpload
    configureRetroLambda = this.&configureRetroLambda
    configureAllRetroLambda = this.&configureAllRetroLambda
}
